metadata:
  version: "1"
  dependencies:
    apps:
      - id: dynatrace.automations
        version: ^1.198.1
      - id: dynatrace.ownership
        version: ^1.3.2
  inputs: []
workflow:
  title: Import teams from a custom source
  tasks:
    import_teams:
      name: import_teams
      description: Import teams into Dynatrace.
      action: dynatrace.ownership:import-teams-to-settings
      input:
        importData: '{{ result("fetch_teams_from_external_source") }}'
        importType: IMPORT_ONLY
        failStrategy: CONTINUE_AND_LOG_FAILURE
        importSource: JSON in Ownership schema
      position:
        x: 0
        y: 2
      predecessors:
        - fetch_teams_from_external_source
      conditions:
        states:
          fetch_teams_from_external_source: OK
    fetch_teams_from_external_source:
      name: fetch_teams_from_external_source
      description: Build a custom task running js Code
      action: dynatrace.automations:run-javascript
      input:
        script: >-
          const apiUrl =
          'https://raw.githubusercontent.com/Dynatrace/Dynatrace-workflow-samples/main/samples/Ownership/Team-Import/example-teams.json';


          export default async function ({ execution_id }) {

            try {
              const response = await fetch(apiUrl);

              if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
              }
              const data = await response.json();
              return data.teams.map(team => ({
                    schemaId: "builtin:ownership.teams",
                    schemaVersion: "1.0.6",
                    scope: "environment",
                    value: {
                      name: team.name,
                      description: team.description,
                      identifier: team.id,
                      responsibilities: {
                        development: team.responsibiliy === "development",
                        security: false,
                        operations: team.responsibiliy === "infrastructure",
                        infrastructure: false,
                        lineOfBusiness: false
                      },
                      contactDetails: [
                        {
                          integrationType: "EMAIL",
                          email: team.email
                        }
                      ],
                      links: [],
                      additionalInformation: []
                    },
                    externalId: team.id
                  }));    
            } catch (error) {
              // Handle errors
              console.error('Error fetching data:', error);
            }
          }
      position:
        x: 0
        y: 1
      predecessors: []
  description: ""
  trigger: {}
  schemaVersion: 3
