{"version":"5","defaultTimeframe":{"from":"now-2h","to":"now"},"sections":[{"id":"26b6a882-3bf4-43ce-8c5e-ea9dcf26d2e1","type":"markdown","markdown":"# Introduction\n\nThis tutorial notebook guides you through setup of the two remediation variants as outlined in [How Red Hat and Dynatrace intelligently automation your production environment](https://www.dynatrace.com/news/blog/how-red-hat-and-dynatrace-intelligently-automate-your-production-environment/)\n\nIn detail, you learn\n- How to create connections to your third party systems\n- How to import the two workflow samples and assign the connections\n- How to adapt the workflows according to your needs\n- How to ingest an event, as outlined in Variant #1 - Remediation with Red Hat Ansible Automation Controller\n- How to leverage the Red Hat Event Driven Ansible rulebook system with Dynatrace as outlined in Variant #2\n- How to access event information within a Ansible playbook"},{"id":"e5e76f13-5ca6-4642-952b-e34f9ab37759","type":"markdown","markdown":"# Step 1: Configure connections to your external systems\n\n**The two sample workflows leverage the following workflow actions:**\n- Red Hat Ansible Automation Controller for auto-remediation\n- Red Hat Event Driven Ansible for auto-remediation\n- Slack for messaging\n- ServiceNow for incident management\n- Ownership\nFeel free to exchange tools like Slack or ServiceNow with your choice of tools like Microsoft Teams, Email or Jira.\n\n**Setup Connections**\n\nDynatrace manages connections and tokens to your third party systems, so that workflows can trigger a remediation flow in Red Hat Ansible Automation Platform or create an incident in ServiceNow. The connection configuration includes: \n* Install the apps using Dynatrace Hub: Head over to Dynatrace Hub via the Launcher, search for Red Hat Ansible for workflows, Slack for Workflows, and ServiceNow for Workflows and install each app.\n* Configure token and endpoint to your systems. It is typically recommended to leverage service users in the target systems. \n* In Dynatrace, [allow outbound connections](https://docs.dynatrace.com/docs/dynatrace-api/environment-api/settings/schemas/builtin-dt-javascript-runtime-allowed-outbound-connections), so that outgoing connections from Dynatrace to your system are enabled: \n* Configure Edge Connect in case your system is placed behind a firewall: https://docs.dynatrace.com/docs/setup-and-configuration/edgeconnect\n\nFor detailed configuration instructions for each tool follow the guidance at: \n- [Red Hat Automation Platform](https://docs.dynatrace.com/docs/platform-modules/automations/workflows/actions/red-hat/redhat-ansible)\n- [ServiceNow](https://docs.dynatrace.com/docs/platform-modules/automations/workflows/actions/service-now)\n- [Slack](https://docs.dynatrace.com/docs/platform-modules/automations/workflows/actions/slack) \n"},{"id":"4ac9e955-bfba-4504-8f3b-3878759deabf","type":"markdown","markdown":"# Step 2: Import workflow samples\n\nWorkflows provide the ability to import samples and guides you through required steps like connection assignment. \nDownload the two samples from this [GitHub repository](https://github.com/Dynatrace/Dynatrace-workflow-samples/tree/main/samples/red%20hat%20ansible%20automation%20platform):\n- wftpl_acme_corp_auto_remediation_tic.yaml\n- wftpl_am_mitigate_cpu_and_failure_ra.yaml\n\nWithin Dynatrace workflows click on the upload button and import the samples. You'll be guided through configuration, which checks if the apps are installed, and supports you in assigning the connections that you setup in step 1. \n\n\n\n"},{"id":"fba4367c-d462-40c5-b2a8-738cd1228b69","type":"markdown","markdown":"# Step 3: Setup Ownership and define tags\n\n**Prerequisite:** \n- You have a host monitored that you can use throughout this sample\n\n**Action:** Install the Ownership app\n- Install the Ownership app using by heading to the Dynatrace Hub, search for Ownership and install the app.\n\n**Action:** \n- Set up a new [Team](https://dt-url.net/ownership?dt=s)\n- Add a Slack channel in contact details (needed for targeted messaging)\n\n**Action:** Select a host and assign it to your team\n- In Hosts, select a host which you can use throughout this sample\n- Copy the entity ID starting with \"HOST-\", which you can find in the URL of your browser and will be needed throughout this sample\n- In the top bar of the Host screen, click the icon for Ownership which will open a side panel\n- In the side panel, choose \"Add owner tag\" and select your team\n\n**Action:** The workflow trigger used tags to limit remediation runs to specific host(s) \n- In Hosts, select the host which you can use throughout this sample\n- In the top bar of the Host screen, click the icon for Properties and Tags\n- Add corresponding tag as outlined in the event filters of the two workflows. For Event-Driven-Ansible add tag (remediation/eda), for Automation-controller based remediation add a tag for ([Environment]DT_RELEASE_STAGE/canary-jenkins)\n\nYou've successfully created your team and assigned it to your monitored host."},{"id":"c94b9f01-3a18-4967-b75a-37ca06a3d9a4","type":"markdown","markdown":"# Step 4: Prepare your Red Hat Ansible artefacts\n\nThe Dynatrace and Red Hat Integration supports triggering job templates in Red Hat Automation Controller and flexible playbook mapping with Red Hat Event Driven Ansible. \nDownload the example the example rulebook and playbook from this [GitHub repository](https://github.com/Dynatrace/Dynatrace-workflow-samples/tree/main/samples/red%20hat%20ansible%20automation%20platform) and adapt the files according to your needs and use case: \n\n**rulebook.yml**\nThe example snippet map a Davis Event \"Failure rate increase\" with the job-template \"your-playbook\"\n\n```  rules:\n    - name: Problem payload Dynatrace for App Failure rate increase issue\n      condition: event.payload.eventData.problemTitle is match (\"Failure rate increase\")\n      action:\n        run_job_template:\n          name: \"your-playbook\"\n          organization: \"Default\"\n```\n\n**playbook.yml**\nThe example snippet shows you how to access the payload event with the syntax \"ansible_eda.event.payload.eventData.eventId\".\n```    hosts: localhost\n  name: \"Remediate Failure rate increase\"\n  tasks:\n    - name: Print Dynatrace ProblemId\n      debug:\n        msg: \"{{ansible_eda.event.payload.eventData.eventId}}\"\n      when: ansible_eda.event.payload.eventData.problemStatus == \"ACTIVE\"\n```\n"},{"id":"261c3650-9f19-4b1f-b0c9-db3660bc7ef9","type":"markdown","markdown":"# Step 6: Refine the workflow trigger\n\n**Prerequisite:** \n- You have a host monitored that you can use throughout this sample as outlined in Step 3. \n- The host has at least one historic problem event attached\n\n\nIn the AutomationEngine, a [workflow](https://docs.dynatrace.com/platform/capabilities/workflows) can be triggered on-demand, using a schedule, or via an event.\nIn this samples, a problem event is used as a workflow trigger, and you can use the historic event to trigger the workflow on demand.\n\nNext, we will execute a DQL query, which queries the problem events to trigger the workflow.\n\n**Action:**\n- Insert the HOST ID in the DQL query in line 4\n- Run the query\n- Copy one of the event results to trigger the workflow manually. This simplified testing the workflow as outlined in the last step.\n"},{"id":"b8421823-2bb6-4a00-af6b-28dc42bf2b90","type":"dql","showTitle":false,"state":{"input":{"value":"fetch events\n| filter in(affected_entity_ids, array(\"HOST-XXXXXXX\"))\n| filter event.kind == \"DAVIS_PROBLEM\"\n| limit 10\n| sort timestamp desc","timeframe":{"from":"now-2h","to":"now"}},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}}},"state":"idle","davis":{"davisVisualization":{}}}},{"id":"dd0e079c-cdef-44fd-b860-b2d866d8c912","type":"markdown","markdown":"# Step 7: Ingest a configuration change event for Automation-controller based remediation \n\nDAVIS AI identifies configuration change events and can correlate those change when a problem appears. \nWith such correlation the correct remediation job template id can be linked to a configuration change event.\n\n**Action:**\n- replace Host in line 3 with the host for your example\n- Replace the remediation action in line 9 with the job template id in your Red Hat Automation Controller. \n- trigger the code line to ingest the configuration change event\n\n** Remark: **\n- The configuration change event would typically be embedded in your deployment pipeline or Ansible playbook for deploying your application. "},{"id":"054f8888-6c09-456c-9416-e2b11ec789df","type":"function","showTitle":false,"foldings":[],"drilldownPath":[],"state":{"input":{"value":"import { EventIngest, EventIngestEventType, eventsClient } from '@dynatrace-sdk/client-classic-environment-v2';\n\nconst Host = 'HOST-7D17DBA7A0C47FAF'\n\nexport default async function () {\n  const terminationEvent: EventIngest = {\n    eventType: EventIngestEventType.CustomConfiguration,\n    title: 'Simulated event to trigger your Red Hat Ansible Template ',\n    properties: {\"remediationType\": \"ansible\", \"remediationAction\":\"9\"},\n    entitySelector: 'type(HOST),entityId(' + Host + ')'\n  };\n  \n  return eventsClient.createEvent({ body: terminationEvent });\n}\n\n     \n","timeframe":{"from":"now-2h","to":"now"}},"visualizationSettings":{"chartSettings":{"gapPolicy":"connect","categoricalBarChartSettings":{}},"singleValue":{"alignment":"center","label":"","recordField":"eventIngestResults","autoscale":true},"table":{"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0},"thresholds":[],"histogram":{"dataMappings":[{"valueAxis":"reportCount","rangeAxis":""}]}},"state":"success","result":{"value":{"eventIngestResults":[{"correlationId":"6b66f8de793e8e6f","status":"OK"}],"reportCount":1},"code":200,"notifications":[],"dateTime":"2024-05-14T12:45:16.515Z","input":{"value":"import { EventIngest, EventIngestEventType, eventsClient } from '@dynatrace-sdk/client-classic-environment-v2';\n\nconst Host = 'HOST-7D17DBA7A0C47FAF'\n\nexport default async function () {\n  const terminationEvent: EventIngest = {\n    eventType: EventIngestEventType.CustomConfiguration,\n    title: 'Simulated event to trigger your Red Hat Ansible Template ',\n    properties: {\"remediationType\": \"ansible\", \"remediationAction\":\"9\"},\n    entitySelector: 'type(HOST),entityId(' + Host + ')'\n  };\n  \n  return eventsClient.createEvent({ body: terminationEvent });\n}\n\n     \n","timeframe":{"from":"now-2h","to":"now"}},"logs":""},"visualization":"recordView"}},{"id":"56c0fd9b-8095-4c87-89c9-34ba519a0589","type":"markdown","markdown":"# Step 8: Test workflow\n\nHead over to imported and configured workflows, press \"RUN\" to start the workflow and paste one example event from Step 6 into the workflow execution. \n\nCongratulations - you triggered four first remediation run and you achieved: \n- establisheda conncetion to your third party systems\n- imported workflows and assigned the connections\n- adopted your workflows\n- adopted your playbooks and rulebooks\n- triggered remediation flow with with Red Hat Ansible Automation Controller and Red Hat Event Driven Ansible rulebook"}]}